# Redis Pub/Sub Application - Production Environment
# Production-ready deployment with HA, security, and monitoring

apiVersion: v1
kind: Namespace
metadata:
  name: redis-pubsub-prod
  labels:
    name: redis-pubsub-prod
    environment: production

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-pubsub-config
  namespace: redis-pubsub-prod
  labels:
    app: redis-pubsub
    environment: production
data:
  # Application Configuration
  server.port: "8445"
  spring.application.name: "RedisPubSub"
  
  # Redis Configuration
  spring.redis.host: "redis-service"
  spring.redis.port: "6379"
  spring.redis.timeout: "5000ms"
  spring.redis.lettuce.pool.max-active: "8"
  spring.redis.lettuce.pool.max-idle: "8"
  spring.redis.lettuce.pool.min-idle: "0"
  
  # Production Logging Configuration
  logging.level.com.redis: "INFO"
  logging.level.org.springframework.data.redis: "WARN"
  logging.level.io.lettuce.core: "WARN"
  logging.level.org.springframework.web: "INFO"
  
  # Management and Monitoring
  management.endpoints.web.exposure.include: "health,info,metrics,prometheus"
  management.endpoint.health.show-details: "when-authorized"

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-data-pvc
  namespace: redis-pubsub-prod
  labels:
    app: redis
    environment: production
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  storageClassName: standard

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-deployment
  namespace: redis-pubsub-prod
  labels:
    app: redis
    component: database
    environment: production
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: 1
  selector:
    matchLabels:
      app: redis
      component: database
  template:
    metadata:
      labels:
        app: redis
        component: database
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 999
        fsGroup: 999
      containers:
      - name: redis
        image: redis:7.4-alpine
        ports:
        - containerPort: 6379
          name: redis-port
        volumeMounts:
        - name: redis-data
          mountPath: /data
        - name: redis-config
          mountPath: /usr/local/etc/redis
        command:
        - redis-server
        - /usr/local/etc/redis/redis.conf
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
      volumes:
      - name: redis-data
        persistentVolumeClaim:
          claimName: redis-data-pvc
      - name: redis-config
        configMap:
          name: redis-config

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-config
  namespace: redis-pubsub-prod
data:
  redis.conf: |
    # Redis Production Configuration
    bind 0.0.0.0
    port 6379
    timeout 0
    tcp-keepalive 300
    
    # Memory Management
    maxmemory 256mb
    maxmemory-policy allkeys-lru
    
    # Persistence
    save 900 1
    save 300 10
    save 60 10000
    
    # Security
    protected-mode yes
    
    # Logging
    loglevel notice
    logfile ""

---
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: redis-pubsub-prod
  labels:
    app: redis
    component: database
    environment: production
spec:
  type: ClusterIP
  ports:
  - port: 6379
    targetPort: 6379
    protocol: TCP
    name: redis-port
  selector:
    app: redis
    component: database

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-pubsub-app-deployment
  namespace: redis-pubsub-prod
  labels:
    app: redis-pubsub-app
    component: application
    environment: production
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: redis-pubsub-app
      component: application
  template:
    metadata:
      labels:
        app: redis-pubsub-app
        component: application
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
      initContainers:
      - name: wait-for-redis
        image: busybox:1.35
        command: ['sh', '-c', 'until nc -z redis-service 6379; do echo waiting for redis; sleep 2; done;']
      containers:
      - name: redis-pubsub-app
        image: redispubsub-redis-pubsub-app:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8445
          name: http-port
        env:
        - name: SPRING_PROFILES_ACTIVE
          value: "prod"
        - name: JAVA_OPTS
          value: "-Xms256m -Xmx512m -XX:+UseG1GC -XX:MaxRAMPercentage=75"
        envFrom:
        - configMapRef:
            name: redis-pubsub-config
        resources:
          requests:
            memory: "512Mi"
            cpu: "200m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /actuator/health
            port: 8445
          initialDelaySeconds: 90
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /actuator/health/readiness
            port: 8445
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3

---
apiVersion: v1
kind: Service
metadata:
  name: redis-pubsub-app-service
  namespace: redis-pubsub-prod
  labels:
    app: redis-pubsub-app
    component: application
    environment: production
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 8445
    protocol: TCP
    name: http-port
  selector:
    app: redis-pubsub-app
    component: application

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: redis-pubsub-ingress
  namespace: redis-pubsub-prod
  labels:
    app: redis-pubsub-app
    environment: production
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
spec:
  rules:
  - host: redis-pubsub.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: redis-pubsub-app-service
            port:
              number: 80
